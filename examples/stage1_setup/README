Recommendations for setting up Autodock Vina screens:

1. in a working directory:
  have three directories, one for centers:
  
    receptors/ contains the pdbqt files for receiving molecule of interest. After some initial prepping 
               (strip hydrogens, etc) I generate them using MGLTools, which free and easy to install. 
               Please see:
               https://github.com/demianriccardi/HackaMol-CaseStudy/tree/master/Vina_disulfide

    centers/   In Autodock Vina, a center localizes a search area (x,y,z dimensional box) that 
               may or may not contain a reasonable binding site (depends on your educated guess). In the 
               HackaMol-CaseStudy, which is part of a paper that is in review, I use the centers of disulfide
               bonds in a collection of X-ray crystal structures to screen the ligands cystine and glutathione 
               disulfide. For this the centers are determined on the fly by a disulfide search. You can 
               cook up your own algorithms for finding reasonable binding sites, or you can use one of the 
               many methods available online (I have been using ftmap.bu.edu for more conventional screens). 
               There are also a ton of awesome tools at the Yang Zhang lab at the University of Michigan 
               (They use some Perl too!!!): http://zhanglab.ccmb.med.umich.edu
               
               Whatever approach is used, if it takes a long time, you should store the centers for future use 
               in this directory. I construct a yaml file of a hash with centers stored for each receptor for 
               easy reference. Yaml is easy to read and edit by human or script. Copy and paste
               from this yaml into the docking configuration file used for screens.
               
               If using FTMap, I have included some scripts:
                1. A simple scripts for processing FTMAP pdbs using kmeans clustering provided by 
                   from Math::Vector::Real::kdTree (THANK YOU SALVA).  This script dumps an XYZ file of search 
                   centers (with Hg atoms).
                2. center_gen.pl center_append.pl can be used to generate summary YAML.

    ligands/   sets of json files generated from big db of pdbqt files  
               scripts: setup_ligands_sets_mce.pl 
                   will pull all the pdbqts and put them into subsets of json files
                   with some additional information.
                
               I used OpenBabel and MGLTools for my setup of the db of pdbqt files.  e.g. I have a ~/db directory 
               with a couple of sets (NCI_diversityset2 and a ZINC subset) that are too big to share.

  and then the "scratch" directories for work and analysis
    docking_NCI/
    docking_ZINC/
    etc.
  
    Within these working directories, copy the broadcast.pl script over and the example.yaml 
    configuration file. Adjust configuration file and do some tests to make sure everything is
    working.  When ready, you are entering stage 2. Briefly, the first screen or dock should pull 
    from the ligands/ directory containing the json subset databases, but all writing should point 
    to a directory of dbs in the working directory.  [This allows work to be carried out more cleanly 
    in parallel.  You can  write to the ligands/ directory, but it could get tangled up if many 
    different approaches are taken.] In each additional screen (say new receptor and or center), 
    reading and writing from the same working directory database seems to work well. 
  
    see descriptions in ligands_example.yaml and ligands_dock.pl.
    see descriptions in receptors_example.yaml and receptors_dock.pl.


  screening thousands of ligands with few receptors vs screening thousands of receptors and few ligands
  have unique sets of scripts.. bleh. Clearly, a generalized class for VS that knows how to do both would
  be useful.

  

 







